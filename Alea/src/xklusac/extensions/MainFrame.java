/*
 * MainFrame.java
 *
 * 
 */
package xklusac.extensions;

import java.util.Date;
import java.util.LinkedList;
import javax.swing.JCheckBox;
import javax.swing.JSpinner;
import xklusac.environment.ExperimentSetup;

/**
 * Class MainFrame<p>
 * This class generates the Main Frame of application that contains buttons for
 * graph export into bitmap files (jpg, png, gif, bmp).<br>
 * Also, when this frame's [x] close button is clicked, whole simulation is
 * terminated immediately.<br>
 * To run the simulation with visualization, Java 1.6 or newer is needed.
 *
 * @author Dalibor Klusacek
 */
public class MainFrame extends javax.swing.JFrame {

    LinkedList<Visualizator> ia = null;
    LinkedList<Schedule_Visualizator> ias = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(LinkedList<Visualizator> ia) {
        initComponents();
        this.ia = ia;
    }

    /**
     *
     * @param ia
     */
    public MainFrame(LinkedList<Schedule_Visualizator> ias, boolean schedule) {
        initComponents();
        this.ias = ias;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        speedSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSeparator = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        spinnerJobWidth = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerJobHeight = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        checkBoxAge = new javax.swing.JCheckBox();
        userCheckBox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alea 4.0");

        jLabel1.setText("Save as");

        jButton1.setText("png");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jpg");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("bmp");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("gif");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        speedSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 10));
        speedSpinner.setToolTipText("set delay of schedule repaint");
        speedSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText("Repaint delay");

        jLabel3.setText("Job size (px)");

        spinnerJobWidth.setModel(new javax.swing.SpinnerNumberModel(9, 2, 99, 1));
        spinnerJobWidth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerJobWidthStateChanged(evt);
            }
        });

        jLabel4.setText("width");

        spinnerJobHeight.setModel(new javax.swing.SpinnerNumberModel(6, 2, 99, 1));
        spinnerJobHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerJobHeightStateChanged(evt);
            }
        });

        jLabel5.setText("height");

        checkBoxAge.setText("draw wait");
        checkBoxAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAgeActionPerformed(evt);
            }
        });

        userCheckBox.setText("draw users");
        userCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userCheckBoxActionPerformed(evt);
            }
        });

        jMenu1.setText("Alea 4.0");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitHandler(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(speedSpinner)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerJobHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerJobWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(checkBoxAge))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerJobWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerJobHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxAge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Quit application.
     *
     */
private void exitHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitHandler
    System.exit(1);// TODO add your handling code here:
}//GEN-LAST:event_exitHandler

    /**
     * Save graphs to png.
     *
     */

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String ext = "png"; // jpg, png, bmp (j2se 1.5+), gif (j2se 1.6+)
    Date d = new Date();
    String identifier = "" + d.getTime();

//ext="-"+123+"."+ext;
    if (ia != null) {

        for (int im = 0; im < ia.size(); im++) {
            Visualizator iaw = ia.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
    if (ias != null) {

        for (int im = 0; im < ias.size(); im++) {
            Schedule_Visualizator iaw = ias.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
}//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Save graphs to jpg.
     *
     */

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String ext = "jpg"; // jpg, png, bmp (j2se 1.5+), gif (j2se 1.6+)
    Date d = new Date();
    String identifier = "" + d.getTime();
    if (ia != null) {

        for (int im = 0; im < ia.size(); im++) {
            Visualizator iaw = ia.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
    if (ias != null) {

        for (int im = 0; im < ias.size(); im++) {
            Schedule_Visualizator iaw = ias.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
}//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Save graphs to bmp.
     *
     */

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    String ext = "bmp"; // jpg, png, bmp (j2se 1.5+), gif (j2se 1.6+)
    Date d = new Date();
    String identifier = "" + d.getTime();

    if (ia != null) {

        for (int im = 0; im < ia.size(); im++) {
            Visualizator iaw = ia.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
    if (ias != null) {

        for (int im = 0; im < ias.size(); im++) {
            Schedule_Visualizator iaw = ias.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
}//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Save graphs to gif.
     *
     */

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    String ext = "gif"; // jpg, png, bmp (j2se 1.5+), gif (j2se 1.6+)
    Date d = new Date();
    String identifier = "" + d.getTime();

    if (ia != null) {

        for (int im = 0; im < ia.size(); im++) {
            Visualizator iaw = ia.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }
    if (ias != null) {

        for (int im = 0; im < ias.size(); im++) {
            Schedule_Visualizator iaw = ias.get(im);

            iaw.saveToFile3(ext, identifier);
        }
    }

}//GEN-LAST:event_jButton4ActionPerformed

    private void speedSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        int delay = (int) spinner.getValue();
        ExperimentSetup.schedule_repaint_delay = delay;
    }//GEN-LAST:event_speedSpinnerStateChanged

    private void spinnerJobWidthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerJobWidthStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        int width = (int) spinner.getValue();
        if (ias != null) {
            Schedule_Visualizator iaw = ias.get(0);
            iaw.jobw = width;
        }

    }//GEN-LAST:event_spinnerJobWidthStateChanged

    private void spinnerJobHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerJobHeightStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        int height = (int) spinner.getValue();
        if (ias != null) {
            Schedule_Visualizator iaw = ias.get(0);
            iaw.jobh = height;
        }

    }//GEN-LAST:event_spinnerJobHeightStateChanged

    private void checkBoxAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAgeActionPerformed
        JCheckBox cb = (JCheckBox) evt.getSource();
        if (ias != null) {
            Schedule_Visualizator iaw = ias.get(0);
            iaw.draw_age = cb.isSelected();
            if(iaw.draw_age && iaw.draw_user){
                iaw.draw_user = false;
                userCheckBox.setSelected(false);
            }
        }

    }//GEN-LAST:event_checkBoxAgeActionPerformed

    private void userCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userCheckBoxActionPerformed
        JCheckBox cb = (JCheckBox) evt.getSource();
        if (ias != null) {
            Schedule_Visualizator iaw = ias.get(0);
            iaw.draw_user = cb.isSelected();
            if(iaw.draw_age && iaw.draw_user){
                iaw.draw_age = false;
                checkBoxAge.setSelected(false);
            }
        }
    }//GEN-LAST:event_userCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxAge;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner speedSpinner;
    private javax.swing.JSpinner spinnerJobHeight;
    private javax.swing.JSpinner spinnerJobWidth;
    private javax.swing.JCheckBox userCheckBox;
    // End of variables declaration//GEN-END:variables

}
